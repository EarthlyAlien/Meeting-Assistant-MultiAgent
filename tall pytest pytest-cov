warning: in the working copy of '__init__.py', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/__init__.py b/__init__.py[m
[1mindex d50439d..db4c289 100644[m
[1m--- a/__init__.py[m
[1m+++ b/__init__.py[m
[36m@@ -1 +1 @@[m
[31m-"""Meeting Assistant Multi-Agent System""" [m
\ No newline at end of file[m
[32m+[m[32m"""Meeting Assistant Multi-Agent System"""[m
[1mdiff --git a/action_item_extraction_agent.py b/action_item_extraction_agent.py[m
[1mindex ec172d4..36ea31f 100644[m
[1m--- a/action_item_extraction_agent.py[m
[1m+++ b/action_item_extraction_agent.py[m
[36m@@ -1,5 +1,6 @@[m
 import json[m
 import re[m
[32m+[m
 import openai[m
 [m
 [m
[36m@@ -9,61 +10,55 @@[m [mclass ActionItemExtractionAgent:[m
         self.model = model[m
         # Regular expressions for simple action item extraction[m
         self.action_keywords = [[m
[31m-            r'(?:need to|must|should|will|going to|have to|shall) ([^.!?]*)',[m
[31m-            r'(?:action item|task|todo|to-do|to do|follow-up|followup)[:\s]* ([^.!?]*)',[m
[31m-            r'(\w+)(?:\s*will|\s*is going to|\s*needs to|\s*must) ([^.!?]*)',[m
[31m-            r'(?:by|before|due)(?:\s*the)?\s*(\d{1,2}(?:st|nd|rd|th)?\s+(?:of\s+)?(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)|tomorrow|next week|(?:this|next) month|(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday))',[m
[32m+[m[32m            r"(?:need to|must|should|will|going to|have to|shall) ([^.!?]*)",[m
[32m+[m[32m            r"(?:action item|task|todo|to-do|to do|follow-up|followup)[:\s]* ([^.!?]*)",[m
[32m+[m[32m            r"(\w+)(?:\s*will|\s*is going to|\s*needs to|\s*must) ([^.!?]*)",[m
[32m+[m[32m            r"(?:by|before|due)(?:\s*the)?\s*(\d{1,2}(?:st|nd|rd|th)?\s+(?:of\s+)?(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)|tomorrow|next week|(?:this|next) month|(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday))",[m
         ][m
[31m-    [m
[32m+[m
     def extract_action_items(self, transcription, summary=None):[m
         """[m
         Extract action items from meeting transcription and/or summary.[m
[31m-        [m
[32m+[m
         Args:[m
             transcription (dict): Transcription data from the TranscriptionAgent[m
             summary (dict, optional): Summary data from the SummarizationAgent[m
[31m-            [m
[32m+[m
         Returns:[m
             dict: Extraction result with list of action items and metadata[m
         """[m
         print("ActionItemExtractionAgent: Extracting action items")[m
[31m-        [m
[32m+[m
         try:[m
             # Use both transcription and summary if available[m
             text = transcription.get("transcription", "")[m
[31m-            [m
[32m+[m
             if summary and "summary" in summary:[m
                 text += "\n\n" + summary["summary"][m
[31m-            [m
[32m+[m
             if not text:[m
                 raise ValueError("No text provided for action item extraction")[m
[31m-            [m
[32m+[m
             # Extract action items using provided method[m
             action_items = self._extract_action_items(text)[m
[31m-            [m
[32m+[m
             return {[m
                 "action_items": action_items,[m
[31m-                "metadata": {[m
[31m-                    "items_found": len(action_items),[m
[31m-                    "status": "completed"[m
[31m-                }[m
[32m+[m[32m                "metadata": {"items_found": len(action_items), "status": "completed"},[m
             }[m
[31m-            [m
[32m+[m
         except Exception as e:[m
             print(f"Error during action item extraction: {str(e)}")[m
             return {[m
                 "action_items": [],[m
[31m-                "metadata": {[m
[31m-                    "status": "error",[m
[31m-                    "error": str(e)[m
[31m-                }[m
[32m+[m[32m                "metadata": {"status": "error", "error": str(e)},[m
             }[m
[31m-    [m
[32m+[m
     def _extract_action_items(self, text):[m
         """[m
         Extract action items from the provided text.[m
[31m-        [m
[31m-        This is a placeholder method. In a production environment, [m
[32m+[m
[32m+[m[32m        This is a placeholder method. In a production environment,[m
         this would use more sophisticated NLP techniques or an LLM.[m
         """[m
         # If API key is provided, use LLM for extraction[m
[36m@@ -76,21 +71,27 @@[m [mclass ActionItemExtractionAgent:[m
         else:[m
             # Fallback to regex-based extraction[m
             return self._extract_with_regex(text)[m
[31m-    [m
[32m+[m
     def _extract_with_llm(self, text):[m
         """Extract action items using an LLM"""[m
         client = openai.OpenAI(api_key=self.api_key)[m
[31m-        [m
[32m+[m
         response = client.chat.completions.create([m
             model=self.model,[m
             messages=[[m
[31m-                {"role": "system", "content": "You are a meeting assistant that extracts action items from meeting transcripts. Extract all tasks, responsibilities, and deadlines in a structured format."},[m
[31m-                {"role": "user", "content": f"Extract all action items from this meeting transcript as a JSON array. Each action item should have 'task', 'assignee', and 'deadline' fields. Use null for missing information:\n\n{text}"}[m
[32m+[m[32m                {[m
[32m+[m[32m                    "role": "system",[m
[32m+[m[32m                    "content": "You are a meeting assistant that extracts action items from meeting transcripts. Extract all tasks, responsibilities, and deadlines in a structured format.",[m
[32m+[m[32m                },[m
[32m+[m[32m                {[m
[32m+[m[32m                    "role": "user",[m
[32m+[m[32m                    "content": f"Extract all action items from this meeting transcript as a JSON array. Each action item should have 'task', 'assignee', and 'deadline' fields. Use null for missing information:\n\n{text}",[m
[32m+[m[32m                },[m
             ],[m
             response_format={"type": "json_object"},[m
[31m-            max_tokens=1000[m
[32m+[m[32m            max_tokens=1000,[m
         )[m
[31m-        [m
[32m+[m
         # Parse the response[m
         result_content = response.choices[0].message.content[m
         try:[m
[36m@@ -99,53 +100,52 @@[m [mclass ActionItemExtractionAgent:[m
         except:[m
             # If parsing fails, return an empty list[m
             return [][m
[31m-    [m
[32m+[m
     def _extract_with_regex(self, text):[m
         """Extract action items using regular expressions"""[m
         action_items = [][m
[31m-        sentences = re.split(r'[.!?]\s+', text)[m
[31m-        [m
[32m+[m[32m        sentences = re.split(r"[.!?]\s+", text)[m
[32m+[m
         for sentence in sentences:[m
             item = self._extract_from_sentence(sentence)[m
             if item and all(item != existing for existing in action_items):[m
                 action_items.append(item)[m
[31m-        [m
[32m+[m
         return action_items[m
[31m-    [m
[32m+[m
     def _extract_from_sentence(self, sentence):[m
         """Extract an action item from a single sentence using pattern matching"""[m
         sentence = sentence.strip()[m
         if not sentence:[m
             return None[m
[31m-        [m
[32m+[m
         # Look for action patterns[m
         task = None[m
         assignee = None[m
         deadline = None[m
[31m-        [m
[32m+[m
         # Find potential task[m
         for pattern in self.action_keywords:[m
             match = re.search(pattern, sentence, re.IGNORECASE)[m
             if match:[m
                 task = match.group(1).strip()[m
                 break[m
[31m-        [m
[32m+[m
         if not task:[m
             return None[m
[31m-        [m
[32m+[m
         # Try to find assignee - look for names followed by verbs[m
[31m-        assignee_match = re.search(r'(\b[A-Z][a-z]+\b)(?:\s+will|\s+should|\s+is going to|\s+needs to)', sentence)[m
[32m+[m[32m        assignee_match = re.search([m
[32m+[m[32m            r"(\b[A-Z][a-z]+\b)(?:\s+will|\s+should|\s+is going to|\s+needs to)",[m
[32m+[m[32m            sentence,[m
[32m+[m[32m        )[m
         if assignee_match:[m
             assignee = assignee_match.group(1)[m
[31m-        [m
[32m+[m
         # Try to find deadline[m
[31m-        deadline_pattern = r'(?:by|before|due)(?:\s*the)?\s*(\d{1,2}(?:st|nd|rd|th)?\s+(?:of\s+)?(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)|tomorrow|next week|(?:this|next) month|(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday))'[m
[32m+[m[32m        deadline_pattern = r"(?:by|before|due)(?:\s*the)?\s*(\d{1,2}(?:st|nd|rd|th)?\s+(?:of\s+)?(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)|tomorrow|next week|(?:this|next) month|(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday))"[m
         deadline_match = re.search(deadline_pattern, sentence, re.IGNORECASE)[m
         if deadline_match:[m
             deadline = deadline_match.group(1)[m
[31m-        [m
[31m-        return {[m
[31m-            "task": task,[m
[31m-            "assignee": assignee,[m
[31m-            "deadline": deadline[m
[31m-        } [m
\ No newline at end of file[m
[32m+[m
[32m+[m[32m        return {"task": task, "assignee": assignee, "deadline": deadline}[m
[1mdiff --git a/app.py b/app.py[m
[1mindex de5619a..a6809a5 100644[m
[1m--- a/app.py[m
[1m+++ b/app.py[m
[36m@@ -1,13 +1,14 @@[m
[31m-import os[m
 import json[m
[32m+[m[32mimport os[m
[32m+[m[32mfrom pathlib import Path[m
 from typing import Optional[m
[31m-from fastapi import FastAPI, File, UploadFile, Form, Request[m
[32m+[m
[32m+[m[32mimport uvicorn[m
[32m+[m[32mfrom dotenv import load_dotenv[m
[32m+[m[32mfrom fastapi import FastAPI, File, Form, Request, UploadFile[m
 from fastapi.responses import HTMLResponse, JSONResponse[m
 from fastapi.staticfiles import StaticFiles[m
 from fastapi.templating import Jinja2Templates[m
[31m-from pathlib import Path[m
[31m-import uvicorn[m
[31m-from dotenv import load_dotenv[m
 from orchestrator import MeetingAssistantOrchestrator[m
 [m
 # Load environment variables[m
[36m@@ -32,19 +33,18 @@[m [mapp.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")[m
 # Setup templates[m
 templates = Jinja2Templates(directory=str(TEMPLATES_DIR))[m
 [m
[32m+[m
 @app.get("/", response_class=HTMLResponse)[m
 async def home(request: Request):[m
     """Render the home page"""[m
[31m-    return templates.TemplateResponse([m
[31m-        "index.html",[m
[31m-        {"request": request}[m
[31m-    )[m
[32m+[m[32m    return templates.TemplateResponse("index.html", {"request": request})[m
[32m+[m
 [m
 @app.post("/process")[m
 async def process_meeting([m
     file: UploadFile = File(...),[m
     openai_api_key: Optional[str] = Form(None),[m
[31m-    azure_speech_key: Optional[str] = Form(None)[m
[32m+[m[32m    azure_speech_key: Optional[str] = Form(None),[m
 ):[m
     """Process a meeting recording"""[m
     try:[m
[36m@@ -53,50 +53,51 @@[m [masync def process_meeting([m
         with open(file_path, "wb") as buffer:[m
             content = await file.read()[m
             buffer.write(content)[m
[31m-        [m
[32m+[m
         # Configure the orchestrator[m
         config = {[m
             "openai_api_key": openai_api_key or os.getenv("OPENAI_API_KEY"),[m
[31m-            "azure_speech_key": azure_speech_key or os.getenv("AZURE_SPEECH_KEY")[m
[32m+[m[32m            "azure_speech_key": azure_speech_key or os.getenv("AZURE_SPEECH_KEY"),[m
         }[m
[31m-        [m
[32m+[m
         # Process the meeting[m
         orchestrator = MeetingAssistantOrchestrator(config)[m
         results = orchestrator.process_meeting(str(file_path))[m
[31m-        [m
[32m+[m
         # Generate report[m
         report = orchestrator.generate_report(results)[m
[31m-        [m
[32m+[m
         # Save results and report with unique names based on timestamp[m
         results_file = UPLOAD_DIR / f"results_{file.filename}.json"[m
         report_file = UPLOAD_DIR / f"report_{file.filename}.md"[m
[31m-        [m
[32m+[m
         with open(results_file, "w") as f:[m
             json.dump(results, f, indent=2)[m
[31m-        [m
[32m+[m
         with open(report_file, "w") as f:[m
             f.write(report)[m
[31m-        [m
[32m+[m
         # Clean up the uploaded audio file[m
         os.remove(file_path)[m
[31m-        [m
[31m-        return JSONResponse({[m
[31m-            "status": "success",[m
[31m-            "message": "Meeting processed successfully",[m
[31m-            "results": results,[m
[31m-            "report": report[m
[31m-        })[m
[31m-        [m
[32m+[m
[32m+[m[32m        return JSONResponse([m
[32m+[m[32m            {[m
[32m+[m[32m                "status": "success",[m
[32m+[m[32m                "message": "Meeting processed successfully",[m
[32m+[m[32m                "results": results,[m
[32m+[m[32m                "report": report,[m
[32m+[m[32m            }[m
[32m+[m[32m        )[m
[32m+[m
     except Exception as e:[m
[31m-        return JSONResponse({[m
[31m-            "status": "error",[m
[31m-            "message": str(e)[m
[31m-        }, status_code=500)[m
[32m+[m[32m        return JSONResponse({"status": "error", "message": str(e)}, status_code=500)[m
[32m+[m
 [m
 @app.get("/health")[m
 async def health_check():[m
     """Health check endpoint"""[m
     return {"status": "healthy"}[m
 [m
[32m+[m
 if __name__ == "__main__":[m
[31m-    uvicorn.run("app:app", host="0.0.0.0", port=8000, reload=True) [m
\ No newline at end of file[m
[32m+[m[32m    uvicorn.run("app:app", host="0.0.0.0", port=8000, reload=True)[m
[1mdiff --git a/main.py b/main.py[m
[1mindex 194e407..152b3b1 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -1,5 +1,6 @@[m
[31m-import os[m
 import argparse[m
[32m+[m[32mimport os[m
[32m+[m
 from orchestrator import MeetingAssistantOrchestrator[m
 [m
 [m
[36m@@ -8,70 +9,92 @@[m [mdef main():[m
     Main function to demonstrate the Meeting Assistant workflow.[m
     """[m
     # Parse command line arguments[m
[31m-    parser = argparse.ArgumentParser(description='Intelligent Meeting Assistant')[m
[31m-    parser.add_argument('--audio', type=str, required=True, help='Path to the meeting audio file')[m
[31m-    parser.add_argument('--openai_api_key', type=str, help='OpenAI API key for summarization and extraction')[m
[31m-    parser.add_argument('--azure_speech_key', type=str, help='Azure Speech API key for transcription')[m
[31m-    parser.add_argument('--output', type=str, default='meeting_results.json', help='Output JSON file path')[m
[31m-    parser.add_argument('--report', type=str, default='meeting_report.md', help='Output report file path')[m
[31m-    [m
[32m+[m[32m    parser = argparse.ArgumentParser(description="Intelligent Meeting Assistant")[m
[32m+[m[32m    parser.add_argument([m
[32m+[m[32m        "--audio", type=str, required=True, help="Path to the meeting audio file"[m
[32m+[m[32m    )[m
[32m+[m[32m    parser.add_argument([m
[32m+[m[32m        "--openai_api_key",[m
[32m+[m[32m        type=str,[m
[32m+[m[32m        help="OpenAI API key for summarization and extraction",[m
[32m+[m[32m    )[m
[32m+[m[32m    parser.add_argument([m
[32m+[m[32m        "--azure_speech_key", type=str, help="Azure Speech API key for transcription"[m
[32m+[m[32m    )[m
[32m+[m[32m    parser.add_argument([m
[32m+[m[32m        "--